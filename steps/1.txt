// -- src/types/index.ts
/**
 * Defines the core data structures and types used throughout the QuikChat application.
 * These types are designed to be consistent with the backend API specification.
 */

import type { Table } from 'dexie';

// Represents the status of a message sent by the current user.
export type MessageStatus = 'sent' | 'delivered' | 'seen';

// Represents a user in the system.
export interface User {
  id: string; // UUID
  email: string;
  name: string;
  avatar: string; // URL
  isOnline: boolean;
  createdAt: Date;
  // For local simulation, storing password hash
  passwordHash?: string;
  friends: string[]; // Array of user IDs
}

// Represents a single message within a chat.
export interface Message {
  id: string; // UUID
  chatId: string; // UUID of the chat it belongs to
  senderId: string; // UUID of the user who sent it
  content: string;
  timestamp: Date;
  isEvent: boolean; // True if it's a system event (e.g., "User joined")
  status?: MessageStatus; // Only for messages sent by the current user
}

// Represents a chat conversation, which can be a 1-on-1 or a group chat.
export interface Chat {
  id: string; // UUID
  name?: string; // Group chat name
  avatar?: string; // Group chat avatar URL
  isGroup: boolean;
  creatorId?: string; // User ID of the group creator
  participantIds: string[];
  lastMessage?: Message;
  unreadCount: number;
}

// Represents a friend request between two users.
export interface FriendRequest {
  id: string; // UUID
  fromUserId: string;
  toUserId: string;
  status: 'pending' | 'accepted' | 'rejected';
  createdAt: Date;
}

// Represents an open world that users can join.
export interface OpenWorld {
  id: string; // e.g., "nexus-prime"
  name: string;
  description: string;
  imageUrl: string;
  population: number;
  isPasswordProtected: boolean;
  password?: string; // For simulation purposes
}

// Represents a user-created theme configuration.
export interface ThemeConfig {
  id: string; // UUID
  name: string;
  colors: {
    background: {
      primary: string;
      secondary: string;
    };
    text: {
      primary: string;
      secondary: string;
    };
    border: string;
    primary: {
      accent: string;
    };
    secondary: {
      accent: string;
    };
  };
}

// Dexie table interfaces for type-safe database interactions.
export interface QuikChatTables {
  users: Table<User, string>;
  chats: Table<Chat, string>;
  messages: Table<Message, string>;
  friendRequests: Table<FriendRequest, string>;
  openWorlds: Table<OpenWorld, string>;
  themes: Table<ThemeConfig, string>;
}

// -- src/lib/utils.ts
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
import { formatDistanceToNowStrict } from 'date-fns';

/**
 * A utility function to merge Tailwind CSS classes conditionally.
 * It combines the functionalities of `clsx` and `tailwind-merge`.
 * @param inputs - A list of class values (strings, objects, arrays).
 * @returns A string of merged Tailwind CSS classes.
 */
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

/**
 * Formats a given date into a human-readable "time ago" string.
 * e.g., "5m", "1h", "3d"
 * @param date - The date to format.
 * @returns A string representing the time elapsed since the date.
 */
export function timeAgo(date: Date): string {
    return formatDistanceToNowStrict(date, { addSuffix: false })
      .replace(/about /g, '')
      .replace(/ seconds?/g, 's')
      .replace(/ minutes?/g, 'm')
      .replace(/ hours?/g, 'h')
      .replace(/ days?/g, 'd')
      .replace(/ months?/g, 'mo')
      .replace(/ years?/g, 'y');
}


// -- src/lib/db.ts
import Dexie from 'dexie';
import { v4 as uuidv4 } from 'uuid';
import type { QuikChatTables, User, Chat, Message, FriendRequest, OpenWorld, ThemeConfig } from '../types';

/**
 * Dexie-based database class for QuikChat.
 * This class manages all local IndexedDB storage, acting as a simulated backend.
 * It defines tables for users, chats, messages, and other application data.
 */
export class QuikChatDB extends Dexie {
  users!: QuikChatTables['users'];
  chats!: QuikChatTables['chats'];
  messages!: QuikChatTables['messages'];
  friendRequests!: QuikChatTables['friendRequests'];
  openWorlds!: QuikChatTables['openWorlds'];
  themes!: QuikChatTables['themes'];

  constructor() {
    super('QuikChatDB');
    this.version(1).stores({
      users: 'id, email, name',
      chats: 'id, *participantIds',
      messages: 'id, chatId, timestamp',
      friendRequests: 'id, fromUserId, toUserId',
      openWorlds: 'id',
      themes: 'id, name',
    });
  }
}

export const db = new QuikChatDB();

/**
 * Seeds the database with initial mock data if it's empty.
 * This function creates a set of users, chats, and messages to provide a realistic
 * starting point for the application.
 */
export const seedDatabase = async () => {
  const userCount = await db.users.count();
  if (userCount > 0) {
    console.log('Database already seeded.');
    return;
  }
  console.log('Seeding database...');

  // 1. Create Mock Users
  const usersToCreate: Omit<User, 'id' | 'createdAt' | 'friends' | 'isOnline'>[] = [
    { name: 'Alice', email: 'alice@quikchat.dev', passwordHash: 'password', avatar: 'https://i.pravatar.cc/150?u=alice' },
    { name: 'Bob', email: 'bob@quikchat.dev', passwordHash: 'password', avatar: 'https://i.pravatar.cc/150?u=bob' },
    { name: 'Charlie', email: 'charlie@quikchat.dev', passwordHash: 'password', avatar: 'https://i.pravatar.cc/150?u=charlie' },
    { name: 'Diana', email: 'diana@quikchat.dev', passwordHash: 'password', avatar: 'https://i.pravatar.cc/150?u=diana' },
    { name: 'Eve', email: 'eve@quikchat.dev', passwordHash: 'password', avatar: 'https://i.pravatar.cc/150?u=eve' },
  ];

  const createdUsers = await Promise.all(
    usersToCreate.map(async (u) => {
      const user: User = {
        ...u,
        id: uuidv4(),
        createdAt: new Date(),
        isOnline: Math.random() > 0.5,
        friends: [],
      };
      await db.users.add(user);
      return user;
    })
  );

  const [alice, bob, charlie, diana, eve] = createdUsers;

  // Make everyone friends with each other for simplicity
  for (const user of createdUsers) {
    user.friends = createdUsers.filter(u => u.id !== user.id).map(u => u.id);
    await db.users.update(user.id, { friends: user.friends });
  }

  // 2. Create Chats and Messages
  // Chat between Alice and Bob
  const chatAliceBobId = uuidv4();
  const messagesAliceBob: Message[] = [
    { id: uuidv4(), chatId: chatAliceBobId, senderId: alice.id, content: 'Hey Bob, how are you?', timestamp: new Date(Date.now() - 1000 * 60 * 5), isEvent: false },
    { id: uuidv4(), chatId: chatAliceBobId, senderId: bob.id, content: 'Doing great, Alice! Just working on the new project. How about you?', timestamp: new Date(Date.now() - 1000 * 60 * 4), isEvent: false },
    { id: uuidv4(), chatId: chatAliceBobId, senderId: alice.id, content: 'Same here. It\'s going well!', timestamp: new Date(Date.now() - 1000 * 60 * 3), isEvent: false },
  ];
  const chatAliceBob: Chat = {
    id: chatAliceBobId,
    isGroup: false,
    participantIds: [alice.id, bob.id],
    lastMessage: messagesAliceBob[messagesAliceBob.length - 1],
    unreadCount: 1,
  };

  // Chat between Alice and Charlie
  const chatAliceCharlieId = uuidv4();
  const messagesAliceCharlie: Message[] = [
    { id: uuidv4(), chatId: chatAliceCharlieId, senderId: charlie.id, content: 'Hey, did you see the latest design mockups?', timestamp: new Date(Date.now() - 1000 * 60 * 30), isEvent: false },
    { id: uuidv4(), chatId: chatAliceCharlieId, senderId: alice.id, content: 'Oh, not yet! Sending them over?', timestamp: new Date(Date.now() - 1000 * 60 * 29), isEvent: false },
  ];
  const chatAliceCharlie: Chat = {
    id: chatAliceCharlieId,
    isGroup: false,
    participantIds: [alice.id, charlie.id],
    lastMessage: messagesAliceCharlie[messagesAliceCharlie.length - 1],
    unreadCount: 0,
  };

  // Group Chat: "Project Phoenix"
  const chatGroupId = uuidv4();
  const messagesGroup: Message[] = [
    { id: uuidv4(), chatId: chatGroupId, senderId: diana.id, content: 'Welcome to the Project Phoenix group chat!', timestamp: new Date(Date.now() - 1000 * 60 * 120), isEvent: false },
    { id: uuidv4(), chatId: chatGroupId, senderId: alice.id, content: 'Glad to be here!', timestamp: new Date(Date.now() - 1000 * 60 * 119), isEvent: false },
    { id: uuidv4(), chatId: chatGroupId, senderId: bob.id, content: 'Let\'s get this done! ðŸ’ª', timestamp: new Date(Date.now() - 1000 * 60 * 118), isEvent: false },
    { id: uuidv4(), chatId: chatGroupId, senderId: 'system', content: `${charlie.name} was added to the group.`, timestamp: new Date(Date.now() - 1000 * 60 * 60), isEvent: true },
    { id: uuidv4(), chatId: chatGroupId, senderId: charlie.id, content: 'Hey everyone!', timestamp: new Date(Date.now() - 1000 * 60 * 59), isEvent: false },
  ];
  const chatGroup: Chat = {
    id: chatGroupId,
    isGroup: true,
    name: 'Project Phoenix',
    avatar: 'https://i.pravatar.cc/150?u=group-phoenix',
    creatorId: diana.id,
    participantIds: [alice.id, bob.id, charlie.id, diana.id],
    lastMessage: messagesGroup[messagesGroup.length - 1],
    unreadCount: 2,
  };
  
  // Friend request for Alice from Eve
  const friendRequest: FriendRequest = {
    id: uuidv4(),
    fromUserId: eve.id,
    toUserId: alice.id,
    status: 'pending',
    createdAt: new Date()
  };

  await db.chats.bulkAdd([chatAliceBob, chatAliceCharlie, chatGroup]);
  await db.messages.bulkAdd([...messagesAliceBob, ...messagesAliceCharlie, ...messagesGroup]);
  await db.friendRequests.add(friendRequest);
  
  // 3. Create Open Worlds
  const worlds: OpenWorld[] = [
    { id: 'nexus-prime', name: 'Nexus Prime', description: 'The central hub for all travelers. A bustling city of light and technology.', imageUrl: 'https://picsum.photos/seed/nexus/400/300', population: 137, isPasswordProtected: false },
    { id: 'serene-valley', name: 'Serene Valley', description: 'A peaceful world of lush forests and tranquil rivers. Perfect for relaxation.', imageUrl: 'https://picsum.photos/seed/serene/400/300', population: 42, isPasswordProtected: false },
    { id: 'cyber-abyss', name: 'Cyber Abyss', description: 'A high-stakes, neon-drenched world. Only for the brave and skilled.', imageUrl: 'https://picsum.photos/seed/cyber/400/300', population: 88, isPasswordProtected: true, password: 'password123' },
  ];
  await db.openWorlds.bulkAdd(worlds);

  console.log('Database seeding complete.');
};


// -- src/components/ui/Avatar.tsx
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"
import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-background-secondary text-text-secondary",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

// -- src/components/ui/Button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background-primary transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary-accent focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary-accent text-white hover:bg-primary-accent/90",
        destructive: "bg-status-error text-white hover:bg-status-error/90",
        outline: "border border-border bg-transparent hover:bg-background-secondary hover:text-text-primary",
        secondary: "bg-secondary-accent text-white hover:bg-secondary-accent/90",
        ghost: "hover:bg-background-secondary hover:text-text-primary",
        link: "text-primary-accent underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

// -- src/components/ui/Card.tsx
import * as React from "react"
import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border border-border bg-background-primary text-text-primary shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-text-secondary", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

// -- src/components/ui/Dialog.tsx
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"
import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root
const DialogTrigger = DialogPrimitive.Trigger
const DialogPortal = DialogPrimitive.Portal
const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-background-primary/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border border-border bg-background-primary p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background-primary transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-primary-accent focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-background-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-text-secondary", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

// -- src/components/ui/Input.tsx
import * as React from "react"
import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-border bg-transparent px-3 py-2 text-sm ring-offset-background-primary file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-text-secondary focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary-accent focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

// -- src/components/ui/Popover.tsx
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"
import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root
const PopoverTrigger = PopoverPrimitive.Trigger
const PopoverAnchor = PopoverPrimitive.Anchor

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border border-border bg-background-primary p-4 text-text-primary shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }

// -- src/components/ui/ScrollArea.tsx
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"
import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

// -- src/components/ui/Spinner.tsx
import * as React from 'react';
import { cn } from '@/lib/utils';

interface SpinnerProps extends React.SVGProps<SVGSVGElement> {
  size?: 'sm' | 'md' | 'lg';
}

const Spinner = ({ className, size = 'md', ...props }: SpinnerProps) => {
  const sizeClasses = {
    sm: 'h-4 w-4',
    md: 'h-6 w-6',
    lg: 'h-8 w-8',
  };

  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      className={cn('animate-spin text-primary-accent', sizeClasses[size], className)}
      {...props}
    >
      <path d="M21 12a9 9 0 1 1-6.219-8.56" />
    </svg>
  );
};

export { Spinner };

// -- src/components/ui/Tabs.tsx
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"
import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-background-secondary p-1 text-text-secondary",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background-primary transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary-accent focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background-primary data-[state=active]:text-text-primary data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background-primary focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary-accent focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

// -- src/components/ui/ThemeToggle.tsx
import * as React from 'react';
import { Moon, Sun } from 'lucide-react';
import { Button } from '@/components/ui/Button';

export function ThemeToggle() {
  const [theme, setTheme] = React.useState<'theme-light' | 'dark'>(
    () => (localStorage.getItem('theme') as 'theme-light' | 'dark') || 'theme-light'
  );

  React.useEffect(() => {
    const root = window.document.documentElement;
    root.classList.remove('theme-light', 'dark');
    root.classList.add(theme);
    localStorage.setItem('theme', theme);
  }, [theme]);

  const toggleTheme = () => {
    setTheme((prevTheme) => (prevTheme === 'dark' ? 'theme-light' : 'dark'));
  };

  return (
    <Button variant="ghost" size="icon" onClick={toggleTheme} aria-label="Toggle theme">
      <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
      <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
      <span className="sr-only">Toggle theme</span>
    </Button>
  );
}

// -- src/components/ui/Tooltip.tsx
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"
import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border border-border bg-background-secondary px-3 py-1.5 text-sm text-text-primary shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

// -- src/App.tsx
import { db, seedDatabase } from './lib/db';
import { useLiveQuery } from 'dexie-react-hooks';
import { useEffect } from 'react';
import { Button } from './components/ui/Button';
import { ThemeToggle } from './components/ui/ThemeToggle';

const App = () => {
  useEffect(() => {
    seedDatabase().catch(console.error);
  }, []);

  const users = useLiveQuery(() => db.users.toArray());

  return (
    <div className="min-h-screen bg-background-primary text-text-primary p-8">
      <div className="max-w-4xl mx-auto">
        <div className="flex justify-between items-center mb-4">
            <h1 className="text-4xl font-heading">QuikChat - Step 1</h1>
            <ThemeToggle />
        </div>
        <p className="mb-4">
          This is the initial setup for the QuikChat application. The core types,
          database schema (with Dexie.js), and a full set of reusable UI components
          are now in place. The database has been seeded with mock data.
        </p>
        <div className="flex gap-4 mb-8">
            <Button>Default Button</Button>
            <Button variant="outline">Outline Button</Button>
            <Button variant="destructive">Destructive Button</Button>
        </div>
        
        <h2 className="text-2xl font-heading mb-2">Users in DB:</h2>
        {users ? (
          <ul className="list-disc pl-5">
            {users.map((user) => (
              <li key={user.id}>{user.name} ({user.email})</li>
            ))}
          </ul>
        ) : (
          <p>Loading users...</p>
        )}
      </div>
    </div>
  );
};

export default App;